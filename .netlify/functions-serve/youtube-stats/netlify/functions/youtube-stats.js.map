{
  "version": 3,
  "sources": ["../../../../../../Users/frantisekdivoky/Downloads/project 5/netlify/functions/youtube-stats.js"],
  "sourceRoot": "/var/folders/r5/hfy6cbgj0gl2k0tdzt2hxx300000gn/T/tmp-42264-b1xNdGlqN3XE",
  "sourcesContent": ["const fs = require('fs');\nconst path = require('path');\n\n// Define multiple possible cache file locations\nconst CACHE_FILES = [\n  path.join(__dirname, '../../youtube-cache.json'),\n  path.join(__dirname, '../../../.netlify/functions-serve/youtube-stats/youtube-cache.json')\n];\n\n// Default data for all videos\nconst DEFAULT_DATA = {\n  lastUpdate: new Date().toISOString(),\n  data: {\n    \"Up\u00EDr Dex\": 0,\n    \"Vezmu Si T\u011B Do Pekla\": 0,\n    \"Hafo\": 0,\n    \"Zabil Jsem Svou Holku\": 0,\n    \"Bunny Hop\": 0,\n    \"HOT\": 0\n  }\n};\n\nexports.handler = async function(event, context) {\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'GET'\n  };\n\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers,\n      body: ''\n    };\n  }\n\n  try {\n    let stats = null;\n    \n    // Try each possible cache file location\n    for (const cacheFile of CACHE_FILES) {\n      if (fs.existsSync(cacheFile)) {\n        try {\n          const fileContent = fs.readFileSync(cacheFile, 'utf8');\n          const parsedContent = JSON.parse(fileContent);\n          // Handle both nested and flat data structures\n          stats = parsedContent.data || parsedContent;\n          // Ensure all videos have a value\n          stats = { ...DEFAULT_DATA.data, ...stats };\n          break;\n        } catch (error) {\n          console.error('Error reading cache file:', error);\n        }\n      }\n    }\n\n    // If no cache file was found or readable, use default data\n    if (!stats) {\n      stats = DEFAULT_DATA.data;\n    }\n\n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify(stats)\n    };\n  } catch (error) {\n    console.error('Error reading YouTube stats:', error);\n    return {\n      statusCode: 200, // Return 200 with default data instead of 500\n      headers,\n      body: JSON.stringify(DEFAULT_DATA.data)\n    };\n  }\n};\n"],
  "mappings": ";AAAA,IAAM,KAAK,QAAQ,IAAI;AACvB,IAAM,OAAO,QAAQ,MAAM;AAG3B,IAAM,cAAc;AAAA,EAClB,KAAK,KAAK,WAAW,0BAA0B;AAAA,EAC/C,KAAK,KAAK,WAAW,oEAAoE;AAC3F;AAGA,IAAM,eAAe;AAAA,EACnB,aAAY,oBAAI,KAAK,GAAE,YAAY;AAAA,EACnC,MAAM;AAAA,IACJ,eAAY;AAAA,IACZ,6BAAwB;AAAA,IACxB,QAAQ;AAAA,IACR,yBAAyB;AAAA,IACzB,aAAa;AAAA,IACb,OAAO;AAAA,EACT;AACF;AAEA,QAAQ,UAAU,eAAe,OAAO,SAAS;AAC/C,QAAM,UAAU;AAAA,IACd,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,EAClC;AAEA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI;AACF,QAAI,QAAQ;AAGZ,eAAW,aAAa,aAAa;AACnC,UAAI,GAAG,WAAW,SAAS,GAAG;AAC5B,YAAI;AACF,gBAAM,cAAc,GAAG,aAAa,WAAW,MAAM;AACrD,gBAAM,gBAAgB,KAAK,MAAM,WAAW;AAE5C,kBAAQ,cAAc,QAAQ;AAE9B,kBAAQ,EAAE,GAAG,aAAa,MAAM,GAAG,MAAM;AACzC;AAAA,QACF,SAAS,OAAO;AACd,kBAAQ,MAAM,6BAA6B,KAAK;AAAA,QAClD;AAAA,MACF;AAAA,IACF;AAGA,QAAI,CAAC,OAAO;AACV,cAAQ,aAAa;AAAA,IACvB;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU,KAAK;AAAA,IAC5B;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,gCAAgC,KAAK;AACnD,WAAO;AAAA,MACL,YAAY;AAAA;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU,aAAa,IAAI;AAAA,IACxC;AAAA,EACF;AACF;",
  "names": []
}
